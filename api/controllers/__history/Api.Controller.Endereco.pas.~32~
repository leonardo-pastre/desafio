unit Api.Controller.Endereco;

interface

uses
  Horse,
  Horse.GBSwagger.Register,
  Horse.GBSwagger.Controller,
  GBSwagger.Path.Register,
  GBSwagger.Path.Attributes,
  System.JSON,
  System.SysUtils,
  System.Net.HttpClient,
  System.Net.HttpClientComponent;

type
  [SwagPath('Endereço')]
  TControllerEndereco = class(THorseGBSwagger)
  private
    function ValidarCEP(ACEP: string): Boolean;
    function TemApenasNumeros(ADado: string): Boolean;
    function ViaCEP(ACEP: string; out ADados: string): Boolean;
    function ApiCEP(ACEP: string; out ADados: string): Boolean;
    function AwesomeApi(ACEP: string; out ADados: string): Boolean;
    function FormatarDadosViaCEP(ADados: string): string;
    function FormatarDadosApiCEP(ADados: string): string;
    function FormatarDadosAwesomeApi(ADados: string): string;
  public

    [SwagGET('endereco/{cep}', 'Consultar o endereço cadastrado')]
    [SwagParamPath('cep', 'CEP a ser consultado')]
    [SwagResponse(200)]
    [SwagResponse(400)]
    [SwagResponse(404)]
    procedure Consultar;
  end;

procedure EnderecoRegistry;

const
  NUMERO_DIGITOS_CEP = 8;

implementation

{ TControllerEndereco }

procedure EnderecoRegistry;
begin
  //THorse.Get('/v1/endereco/:cep', ConsultarCEP);
  THorseGBSwaggerRegister.RegisterPath(TControllerEndereco);
end;

procedure TControllerEndereco.Consultar;
var
  CEP: string;
  Dados: string;
  Retorno: TJSONObject;
begin
  CEP := FRequest.Params.Items['cep'];

  if not ValidarCEP(CEP) then
  begin
    FResponse.Send(TJSONObject.Create(TJSONPair.Create('erro', 'CEP Inválido'))).Status(THTTPStatus.BadRequest);
    Exit;
  end;

  if not ViaCEP(CEP, Dados) then
    if not ApiCEP(CEP, Dados) then
      if not AwesomeApi(CEP, Dados) then
      begin
        FResponse.Send(TJSONObject.Create(TJSONPair.Create('erro', 'Erro ao obter o endereço correspondente'))).Status(THTTPStatus.NotFound);
        Exit;
      end;

  try
    Retorno := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(Dados), 0) as TJSONObject;
    FResponse.Send<TJSONObject>(Retorno).Status(THTTPStatus.OK);
  except
    on E: Exception do
      FResponse.Send(TJSONObject.Create(TJSONPair.Create('erro', E.Message))).Status(THTTPStatus.InternalServerError);
  end;
end;

function TControllerEndereco.ValidarCEP(ACEP: string): Boolean;
begin
  Result := (Trim(ACEP) <> '') and
            (Length(ACEP) = NUMERO_DIGITOS_CEP) and
            TemApenasNumeros(ACEP);
end;

function TControllerEndereco.TemApenasNumeros(ADado: string): Boolean;
var
  I: Integer;
begin
  Result := True;

  for I := Low(ADado) to High(ADado) do
  begin
    if not CharInSet(ADado[I], ['0'..'9']) then
    begin
      Result := False;
      Break;
    end;
  end;
end;

function TControllerEndereco.ViaCEP(ACEP: string; out ADados: string): Boolean;
var
  LClient: TNetHTTPClient;
  LResponse: IHTTPResponse;
  LRetorno: string;
begin
  Result := False;
  LClient := TNetHTTPClient.Create(nil);

  try
    try
      LResponse := LClient.Get('https://viacep.com.br/ws/' + ACEP + '/json/');
      LRetorno := LResponse.ContentAsString(TEncoding.UTF8);
      
      if (LResponse.StatusCode <> 200) or (LowerCase(LRetorno).Contains('"erro":')) then
      begin
        Exit;
      end;
        
      ADados := FormatarDadosViaCEP(LRetorno);
      Result := True;
    except
      on E: Exception do
      begin
        // grava no log
      end;
    end;
  finally
    FreeAndNil(LClient);
  end;
end;

function TControllerEndereco.ApiCEP(ACEP: string; out ADados: string): Boolean;
var
  LClient: TNetHTTPClient;
  LResponse: IHTTPResponse;
  LRetorno: string;
begin
  Result := False;
  LClient := TNetHTTPClient.Create(nil);

  try
    try
      LResponse := LClient.Get('https://ws.apicep.com/cep/' + ACEP + '.json');
      LRetorno := LResponse.ContentAsString(TEncoding.UTF8);
      
      if (LResponse.StatusCode <> 200) or (LowerCase(LRetorno).Contains('"ok":false')) then
      begin
        Exit;
      end;
        
      ADados := FormatarDadosViaCEP(LRetorno);
      Result := True;
    except
      on E: Exception do
      begin
        // grava no log
      end;
    end;
  finally
    FreeAndNil(LClient);
  end;
end;

function TControllerEndereco.AwesomeApi(ACEP: string; out ADados: string): Boolean;
var
  Client: TNetHTTPClient;
  Response: IHTTPResponse;
  Retorno: string;
begin
  Result := False;
  Client := TNetHTTPClient.Create(nil);

  try
    try
      Response := Client.Get('https://cep.awesomeapi.com.br/json/' + ACEP);
      Retorno := Response.ContentAsString(TEncoding.UTF8);
      
      if (Response.StatusCode <> 200) or (LowerCase(Retorno).Contains('"erro":')) then
      begin
        Exit;
      end;
        
      ADados := FormatarDadosViaCEP(Retorno);
      Result := True;
    except
      on E: Exception do
      begin
        // grava no log
      end;
    end;
  finally
    FreeAndNil(Client);
  end;
end;

function TControllerEndereco.FormatarDadosViaCEP(ADados: string): string;
var
  JSONRetorno: TJSONObject;
  JSONEndereco: TJSONObject;
begin
  JSONEndereco := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(ADados), 0) as TJSONObject;

  JSONRetorno := TJSONObject.Create;

  JSONRetorno.AddPair('cep',JSONEndereco.GetValue<string>('cep'));
  JSONRetorno.AddPair('logradouro',JSONEndereco.GetValue<string>('logradouro'));
  JSONRetorno.AddPair('complemento',JSONEndereco.GetValue<string>('complemento'));
  JSONRetorno.AddPair('bairro',JSONEndereco.GetValue<string>('bairro'));
  JSONRetorno.AddPair('cidade',JSONEndereco.GetValue<string>('localidade'));
  JSONRetorno.AddPair('uf',JSONEndereco.GetValue<string>('uf'));

  Result := JSONRetorno.ToString;
end;

function TControllerEndereco.FormatarDadosApiCEP(ADados: string): string;
var
  JSONRetorno: TJSONObject;
  JSONEndereco: TJSONObject;
begin
  JSONEndereco := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(ADados), 0) as TJSONObject;

  JSONRetorno := TJSONObject.Create;

  JSONRetorno.AddPair('cep',JSONEndereco.GetValue<string>('code'));
  JSONRetorno.AddPair('logradouro',JSONEndereco.GetValue<string>('address'));
  JSONRetorno.AddPair('complemento','');
  JSONRetorno.AddPair('bairro',JSONEndereco.GetValue<string>('district'));
  JSONRetorno.AddPair('cidade',JSONEndereco.GetValue<string>('city'));
  JSONRetorno.AddPair('uf',JSONEndereco.GetValue<string>('state'));

  Result := JSONRetorno.ToString;
end;

function TControllerEndereco.FormatarDadosAwesomeApi(ADados: string): string;
var
  JSONRetorno: TJSONObject;
  JSONEndereco: TJSONObject;
begin
  JSONEndereco := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(ADados), 0) as TJSONObject;

  JSONRetorno := TJSONObject.Create;

  JSONRetorno.AddPair('cep',JSONEndereco.GetValue<string>('cep'));
  JSONRetorno.AddPair('logradouro',JSONEndereco.GetValue<string>('address'));
  JSONRetorno.AddPair('complemento','');
  JSONRetorno.AddPair('bairro',JSONEndereco.GetValue<string>('district'));
  JSONRetorno.AddPair('cidade',JSONEndereco.GetValue<string>('city'));
  JSONRetorno.AddPair('uf',JSONEndereco.GetValue<string>('state'));

  Result := JSONRetorno.ToString;
end;

end.
